# variant 6 (One man'sj unk is another man's treasure)
n = 308_737_337
e = 17_657

# std::vector<long> coded = {
#     279604812, 23295830, 153283840, 227200722, 44931545, 105047949, 23295830, 306850011, 197827502, 152539466,
#     227200722, 69010571, 23295830, 211670599, 227200722, 5595583, 197827502, 227200722, 105047949, 23295830,
#     3071939, 18553803, 19316748, 153283840, 184458268, 227200722, 44931545, 105047949, 23295830, 306850011,
#     197827502, 227200722, 18553803, 184458268, 153283840, 105047949, 197827502, 69010571, 184458268, 153283840
# };

coded = [
    279604812, 23295830, 153283840, 227200722, 44931545, 105047949, 23295830, 306850011, 197827502, 152539466,
    227200722, 69010571, 23295830, 211670599, 227200722, 5595583, 197827502, 227200722, 105047949, 23295830,
    3071939, 18553803, 19316748, 153283840, 184458268, 227200722, 44931545, 105047949, 23295830, 306850011,
    197827502, 227200722, 18553803, 184458268, 153283840, 105047949, 197827502, 69010571, 184458268, 153283840
]

h = dict()


def mod_pow(base, exponent, modulus):
    if exponent == 0:
        return 1
    elif exponent % 2 == 1:  # odd exponent
        return (base * mod_pow(base, exponent - 1, modulus)) % modulus
    else:
        halfexp = mod_pow(base, exponent // 2, modulus)
        return (halfexp * halfexp) % modulus


for i in range(128):
    h[mod_pow(i, e, n)] = i

# for (long n : v) {
#         std::cout << n << ", ";
#     }

#include <unordered_map>
# std::unordered_map<std::string, std::string> u;

for letter in coded:
    print(chr(h[letter]), end = '')